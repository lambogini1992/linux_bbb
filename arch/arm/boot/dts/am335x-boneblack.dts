// SPDX-License-Identifier: GPL-2.0-only
/*
 * Copyright (C) 2012 Texas Instruments Incorporated - https://www.ti.com/
 */
/dts-v1/;

#include "am33xx.dtsi"
#include "am335x-bone-common.dtsi"
#include "am335x-boneblack-common.dtsi"
#include "am335x-boneblack-hdmi.dtsi"

/ {
	model = "TI AM335x BeagleBone Black";
	compatible = "ti,am335x-bone-black", "ti,am335x-bone", "ti,am33xx";

	chosen {
		base_dtb = "am335x-boneblack.dts";
		base_dtb_timestamp = __TIMESTAMP__;
	};

	leds {
		pinctrl-names = "default";
		pinctrl-0 = <&user_leds_s0>;

		compatible = "gpio-leds";

		usr_0_led {
			label = "beaglebone:green:usr0";
			gpios = <&gpio1 21 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat";
			default-state = "off";
		};

		usr_1_led {
			label = "beaglebone:green:usr1";
			gpios = <&gpio1 22 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "mmc0";
			default-state = "off";
		};

		usr_2_led {
			label = "beaglebone:green:usr2";
			gpios = <&gpio1 23 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "cpu0";
			default-state = "off";
		};

		usr_3_led {
			label = "beaglebone:green:usr3";
			gpios = <&gpio1 24 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "mmc1";
			default-state = "off";
		};
	};
	/* backlight is optional */
	backlight: backlight {
		pinctrl-names = "default";
		pinctrl-0 = <&backlight_gpio_pins>;
		compatible = "gpio-backlight";
		gpios = <&gpio1 17 GPIO_ACTIVE_HIGH>;
		status = "okay";
		// connect lcd lite pin to P9.23 which is gpio1[17]
		// refer to https://elinux.org/Beagleboard:Cape_Expansion_Headers
		};
};

&cpu0_opp_table {
	/*
	 * All PG 2.0 silicon may not support 1GHz but some of the early
	 * BeagleBone Blacks have PG 2.0 silicon which is guaranteed
	 * to support 1GHz OPP so enable it for PG 2.0 on this board.
	 */
	oppnitro-1000000000 {
		opp-supported-hw = <0x06 0x0100>;
	};
};

&am33xx_pinmux {
	bb_spi0_pins: pinmux_bb_spi0_pins {
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_SPI0_SCLK, PIN_INPUT, MUX_MODE0)	/* P9_22 (A17) spi0_sclk.spi0_sclk */
			AM33XX_PADCONF(AM335X_PIN_SPI0_D0, PIN_INPUT, MUX_MODE0)	/* P9_21 (B17) spi0_d0.spi0_d0 */
			AM33XX_PADCONF(AM335X_PIN_SPI0_D1, PIN_INPUT, MUX_MODE0)	/* P9_18 (B16) spi0_d1.spi0_d1 */
			AM33XX_PADCONF(AM335X_PIN_SPI0_CS0, PIN_INPUT, MUX_MODE0)	/* P9_17 (A16) spi0_cs0.spi0_cs0 */
		>;
	};
/* default state has all gpios released and mode set to uart1 */
	/* See page 1446 of am35xx TRM */
	bb_spi1_pins: pinmux_bb_spi1_pins {
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_MCASP0_ACLKX, 	PIN_OUTPUT_PULLUP, 	MUX_MODE3)	/* mcasp0_aclkx.spi1_sclk */
			AM33XX_PADCONF(AM335X_PIN_MCASP0_FSX, 		PIN_INPUT_PULLUP, 	MUX_MODE3)	/* mcasp0_fsx.spi1_d0 *//*MISO*/
			AM33XX_PADCONF(AM335X_PIN_MCASP0_AXR0, 		PIN_OUTPUT_PULLUP, 	MUX_MODE3)	/* mcasp0_axr0.spi1_d1 *//*MOSI*/
			AM33XX_PADCONF(AM335X_PIN_MCASP0_AHCLKR, 	PIN_OUTPUT_PULLUP, 	MUX_MODE3)	/* mcasp0_ahclkr.spi1_cs0 */
			AM33XX_PADCONF(AM335X_PIN_MCASP0_FSR, 		PIN_OUTPUT_PULLUP, 	MUX_MODE7)	/* gpio, dc */
			AM33XX_PADCONF(AM335X_PIN_MCASP0_AHCLKX, 	PIN_OUTPUT_PULLUP, 	MUX_MODE7)	/* gpio, reset */
		>;
	};

	backlight_pwm_pins: pinmux_backlight_pwm_pins {
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_GPMC_A3, PIN_OUTPUT, MUX_MODE6) /* gpmc_a2.ehrpwm1b */
		>;
	};  /* gpmc_a2.ehrpwm1b */

	backlight_gpio_pins: pinmux_backlight_gpio_pins {
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_GPMC_A1, PIN_OUTPUT_PULLUP, MUX_MODE7) /*  gpio blacklight*/
		>;
	};

	uart5_gpio_pins: uart5_pinmux_gpio_pins {
		pinctrl-single,pins = <
		AM33XX_PADCONF(AM335X_PIN_LCD_DATA8 , PIN_OUTPUT_PULLUP,   MUX_MODE4) /* uart5.tx*/
		AM33XX_PADCONF(AM335X_PIN_LCD_DATA9 , PIN_INPUT, 		   MUX_MODE4) /* uart5.rx*/
		AM33XX_PADCONF(AM335X_PIN_LCD_DATA15, PIN_OUTPUT_PULLUP,   MUX_MODE6) /* uart5.rts*/
		AM33XX_PADCONF(AM335X_PIN_LCD_DATA14, PIN_INPUT,           MUX_MODE6) /* uart5.cts*/
		>;
	};

	bt_enable_gpio_pin: bt_enable_gpio_pin{
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_GPMC_AD7 , PIN_OUTPUT_PULLUP,   MUX_MODE7) /* BT-REG-On*/
		>;
	};

	bt_host_wake_gpio_pin: bt_host_wake_gpio_pin{
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_GPMC_AD6 , PIN_INPUT,   MUX_MODE7) /* BT Host Wake */
		>;
	};

	bt_dev_wake_gpio_pin: bt_dev_wake_gpio_pin{
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_GPMC_AD2 , PIN_OUTPUT_PULLUP,   MUX_MODE7) /* BT dev wake */
		>;
	};

	uart3_pins: pinmux_uart3_pins {
		pinctrl-single,pins = <
			AM33XX_PADCONF(AM335X_PIN_MII1_RXD3, PIN_INPUT_PULLUP, MUX_MODE1)	/* (L17) gmii1_rxd3.uart3_rxd */
			AM33XX_PADCONF(AM335X_PIN_MII1_RXD2, PIN_OUTPUT_PULLDOWN, MUX_MODE1)	/* (L16) gmii1_rxd2.uart3_txd */
			AM33XX_PADCONF(AM335X_PIN_MDIO, PIN_INPUT, MUX_MODE3)		/* (M17) mdio_data.uart3_ctsn */
			AM33XX_PADCONF(AM335X_PIN_MDC, PIN_OUTPUT_PULLDOWN, MUX_MODE3)	/* (M18) mdio_clk.uart3_rtsn */
		>;
	};

};


&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart3_pins>;
	status = "okay";
};


&uart5 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart5_gpio_pins &bt_enable_gpio_pin &bt_host_wake_gpio_pin &bt_dev_wake_gpio_pin>;

	status = "okay";

	bluetooth {
		compatible       = "cyw,cyw43012";
		reg-on-gpios	 = <&gpio1 7 GPIO_ACTIVE_HIGH>;
		dev-wake-gpios	 = <&gpio1 2 GPIO_ACTIVE_LOW>;
		interrupt-parent = <&gpio1>;
		interrupts 		 = <6 IRQ_TYPE_EDGE_RISING>;
	};
};


&spi1 {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&bb_spi1_pins>;
	/*
	 * Select the D0 pin as output and D1 as
	 * input. The default is D0 as input and
	 * D1 as output.
	 */
	ti,pindir-d0-out-d1-in;

	channel@0{
		status = "disabled";
		reg = <0>;
	};

	display@0{
		status = "okay";
		compatible = "ilitek,ili9486", "waveshare,rpi-lcd-35";
		reg = <0>;
		spi-max-frequency = <1000000>;
		dc-gpios    = <&gpio3 19 0>;   // lcd dc    P9.27 gpio3[19]
		reset-gpios = <&gpio3 21 0>;   // lcd reset P9.25 gpio3[21]
		// backlight is optional
		// choose either pwm or gpio control
		backlight = <&backlight>; // lcd lite  P9.23 gpio1[17]
		// backlight = <&backlight_pwm>;    // lcd lite  P9.16 gpmc_a2.ehrpwm1b
		// refer to https://elinux.org/Beagleboard:Cape_Expansion_Headers
		// rotation is optional
		rotation = <180>;
	};
};